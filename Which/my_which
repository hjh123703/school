#!/bin/sh

# 'which' takes a list of command names and searches the user's PATH 
# to identify the full path of executables matching those commands. 
# If  the '-a' option is provided, all matching paths are displayed, 
# otherwise only the first match is shown

# Flag to track whether '-a' option (list all matches) is enabled
opt_a=0

# Counter to track how many commands were successfully resolved
found=0

# Store arguments passed to the script
args="$@"

# Store number of arguments passed to the script
num_args=$#


# Function: Display usage information and exit
error_usage(){
	echo "usage: which [-a] name ..." >&2
	exit 1
}


# Function: Display 'Command not found' diagnostic
error_option(){
	echo "which: $1: Command not found." >&2

}

# Function: Parse command-line options and arguments 
check_args(){
        # Process options. The ':' before 'a' allows manual handling of unknown flags
	while getopts ":a" options; do
		case "${options}" in
			# if '-a' option is enabled
			a) 
		   	  opt_a=1
		   	  ;;
			# If an unknown option is used, display error message
			?) 
			  echo "which: unknown option -- ${OPTARG}" >&2
			  error_usage 
			  exit 1
		   	  ;;
		esac
	done

	# Executing Shift in this function does not apply to other functions
	# It's scope is limited to this function
	shift $(( OPTIND - 1 ))

	# So we created extra variables 
        args="$@"
	num_args=$#


	# No arguments Provided
        [ $num_args -eq 0 ] && error_usage  
}



# Determine search path (use OpenBSD's default if PATH is unset or empty)
[ -z "$PATH" ] && PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin"


	

# Loop over each directory in path and check if corresponding valid file exists
main_function(){
	# Iterate over each provided command argument
	for arg in $args; do
		is_found=0
		
		case "$arg" in
			*/*) # Explicit path provided

				if [ -f "$arg" ] && [ -x "$arg" ]; then
					echo "$arg"
					found=$((found+1))
					is_found=1
				fi
				;;
			*) # Search for command in PATH directories
				IFS=':'
				for dir in $PATH; do
					[ -z "$dir" ] && dir="." # Empty PATH entry means current directory
					candidate="$dir/$arg"
					if [ -f "$candidate" ] && [ -x "$candidate" ]; then
						echo "$candidate"
						found=$((found+1))
						is_found=1
					# If -a option is not used, only display first match
						[ "$opt_a" -eq 0 ] && break
					fi
				done
				unset IFS
				;;
		esac

		# If command wasn't found, show diagnostic
		[ $is_found -eq 0 ] && error_option "$arg"
	done


	# Program exits in the code below

	# Case: All names were successfully resolved
	if [ "$found" -eq "$num_args" ]; then
		exit 0
	fi

	# Case: No names were resolved
	if [ "$found" -eq 0 ]; then
		exit 2
	fi

	# Case: Some names were resolved but not all
	exit 1
}


check_args "$@"
main_function "$args"
